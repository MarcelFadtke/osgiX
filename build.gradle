plugins {
	// code formatting
	id "com.diffplug.gradle.spotless" version "1.3.2"
	// publishing
	id "com.jfrog.bintray" version "1.5"
}

//////////////////////////////////////////
// ENFORCE FORMATTING ON THE MISC FILES //
//////////////////////////////////////////
spotless {
	format 'misc', {
		target '**/.gitignore', '**/*.gradle', '**/*.md', '**/*.sh'
		indentWithTabs()
		trimTrailingWhitespace()
		endWithNewline()
	}
	freshmark {}
}

///////////////////////////////
// CREATES THE EXTENSION JAR //
///////////////////////////////
apply plugin: 'java'
jar {
	manifest.attributes(
		'Export-Package': PKG,
		'Fragment-Host': 'system.bundle; extension:=framework',
		'Bundle-ManifestVersion': '2',
		'Bundle-License': 'public domain - http://unlicense.org/',
		'Bundle-SymbolicName': project.name,
		'Bundle-Version': version,
	)
}

/////////////
// PUBLISH //
/////////////
// MavenCentral requires source jar
task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

// MavenCentral requires javadoc jar
def makeLink = { url, text -> "<a href=\"${url}\" style=\"text-transform: none;\">${text}</a>" }
def javadocInfo = '<h2>' + makeLink("https://${VCS_URL}", "${group}:${name}:${version}") +
' by ' + makeLink('http://www.diffplug.com', 'DiffPlug') + '</h2>'
javadoc {
	options.addStringOption('Xdoclint:none', '-quiet')
	options.header javadocInfo
	options.footer javadocInfo
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

// pulls the credentials from either the environment variable or gradle.properties
def cred = {
	if (System.env[it] != null) {
		return System.env[it]
	} else if (project.hasProperty(it)) {
		return project[it]
	} else {
		return 'unknown_' + it
	}
}

apply plugin: 'maven-publish'
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
			pom.withXml {
				// add MavenCentral requirements to the POM
				asNode().children().last() + {
					resolveStrategy = Closure.DELEGATE_FIRST
					name project.name
					description project.description
					url "https://${VCS_URL}"
					scm {
						url "https://${VCS_URL}"
						connection "scm:git:git://${VCS_URL}"
						developerConnection "scm:git:ssh:git@${VCS_URL}"
					}
					licenses {
						license {
							name 'Public Domain'
							url 'http://unlicense.org/'
							distribution 'repo'
						}
					}
					developers {
						developer {
							id 'nedtwigg'
							name 'Ned Twigg'
							email 'ned.twigg@diffplug.com'
						}
					}
				}
			}
		}
	}
}

// upload releases to bintray and then mavenCentral
bintray {
	user = cred('bintray_user')
	key = cred('bintray_pass')
	publications = ['mavenJava']
	publish = true
	pkg {
		repo = 'opensource'
		name = project.name.substring(BINTRAY_NAME_BASE.length())
		userOrg = project.org
		licenses = ['Unlicense']
		vcsUrl = "https://${VCS_URL}"
		version {
			name = project.version
		}
	}
}

publish.dependsOn(bintrayUpload)
bintrayUpload.dependsOn(['generatePomFileForMavenJavaPublication', jar, sourcesJar, javadocJar])
